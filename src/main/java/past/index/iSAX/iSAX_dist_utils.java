package past.index.iSAX;

public class iSAX_dist_utils{

//** iSAX breakpoints depending on cardinalities as in the iSAXpaper

  public static final double[] breakpoint_card_2 = { 0 };
  public static final double[] breakpoint_card_3 = { -0.43, 0.43 };
  //public static final double[] breakpoint_card_4 = { -0.67, 0, 0.67 };
  public static final double[] breakpoint_card_4 = { 256, 512, 768 };
  public static final double[] breakpoint_card_5 = { -0.84, -0.25, 0.25, 0.84 };
  public static final double[] breakpoint_card_6 = { -0.97, -0.43, 0.00, 0.43, 0.97 };
  public static final double[] breakpoint_card_7 = { -1.07, -0.57, -0.18, 0.18, 0.57, 1.07 };
  public static final double[] breakpoint_card_8 = { -1.15, -0.67, -0.32, 0.00, 0.32, 0.67, 1.15 };
  public static final double[] breakpoint_card_9 = { -1.22, -0.76, -0.43, -0.14, 0.14, 0.43, 0.76, 1.22 };
  public static final double[] breakpoint_card_10 = { -1.28, -0.84, -0.52, -0.25, 0.00, 0.25, 0.52,0.84, 1.28 };
  public static final double[] breakpoint_card_256 ={  -2.66007,  -2.41756,  -2.26623 , -2.15387 , -2.06353 , -1.98743, -1.92135,  -1.86273,
		 -1.80989,  -1.76167,  -1.71723 , -1.67594 , -1.63733  ,-1.60101,  -1.56669,  -1.53412,
		 -1.50310 , -1.47347  ,-1.44507  ,-1.41780 , -1.39154,  -1.36620 , -1.34172,  -1.31801,
		-1.29502 , -1.27270 , -1.25099,  -1.22986 , -1.20926,  -1.18916 , -1.16954 , -1.15035,
		-1.13158,  -1.11319,  -1.09518 , -1.07752 , -1.06018,  -1.04316 , -1.02643 , -1.00999,
		 -0.99382,  -0.97790,  -0.96222,  -0.94678 , -0.93156,  -0.91656,  -0.90175,  -0.88715,
		-0.87273,  -0.85848,  -0.84442,  -0.83051 , -0.81677,  -0.80317,  -0.78973, -0.77642,
		-0.76325,  -0.75022,  -0.73730,  -0.72451,  -0.71184,  -0.69928,  -0.68683 , -0.67449,
		-0.66225, -0.65010,  -0.63806, -0.62610,  -0.61423,  -0.60245,  -0.59075,  -0.57913,
		-0.56759,  -0.55613 , -0.54473 , -0.53341,  -0.52215,  -0.51097,  -0.49984,  -0.48878,
		 -0.47777,  -0.46683,  -0.45593, -0.44510,  -0.43431,  -0.42358  -0.41289,  -0.40225,
		-0.39166,  -0.38111,  -0.37060,  -0.36013,  -0.34970,  -0.33931,  -0.32896,  -0.31864,
		-0.30835 , -0.29810,  -0.28788 , -0.27769,  -0.26753,  -0.25739 , -0.24729,  -0.23720,
		-0.22714,  -0.21711,  -0.20709,  -0.19710,  -0.18713, -0.17717,  -0.16723,  -0.15731,
		-0.14740,  -0.13751,  -0.12764,  -0.11777,  -0.10792,  -0.09807,  -0.08824,  -0.07841,
		-0.06859,  -0.05878,  -0.04898,  -0.03918,  -0.02938,  -0.01958,  -0.00979,   0.00000,
		0.00979,   0.01958,   0.02938,   0.03918,   0.04898,   0.05878,   0.06859,   0.07841,
		 0.08824,   0.09807,   0.10792,   0.11777,   0.12764,   0.13751,   0.14740,   0.15731,
		0.16723,   0.17717,   0.18713,   0.19710,   0.20709,   0.21711,   0.22714,   0.23720,
		0.24729,   0.25739,   0.26753,   0.27769,   0.28788,   0.29810,   0.30835,   0.31864,
		0.32896,   0.33931,   0.34970,   0.36013,   0.37060,   0.38111,   0.39166,   0.40225,
		0.41289,   0.42358,   0.43431,   0.44510,   0.45593,   0.46683,   0.47777,   0.48878,
		0.49984,   0.51097,   0.52215,   0.53341,   0.54473,   0.55613,   0.56759,   0.57913,
		0.59075,   0.60245,   0.61423,   0.62610,   0.63806,   0.65010,   0.66225,   0.67449,
		0.68683,   0.69928,   0.71184,   0.72451,   0.73730,   0.75022,   0.76325,   0.77642,
		0.78973,   0.80317,   0.81677,   0.83051,   0.84442,   0.85848,   0.87273,   0.88715,
		0.90175,   0.91656,   0.93156,   0.94678,   0.96222,   0.97790,   0.99382,   1.00999,
		1.02643,  1.04316,  1.06018,   1.07752,   1.09518,   1.11319,   1.13158,   1.15035,
		1.16954,   1.18916,   1.20926,   1.22986,   1.25099,   1.27270,   1.29502,   1.31801,
		1.34172,   1.36620,  1.39154,   1.41780,   1.44507,   1.47347,  1.50310,   1.53412,
		1.56669,   1.60101,   1.63733,   1.67594,   1.71723,   1.76167,   1.80989,   1.86273,
		1.92135,   1.98743,   2.06353,   2.15387,  2.26623,   2.41756,   2.66007};
  /**
The lookuptable and distance tables were generated using the matlab code provided on the SAX website 
TODO add more possibilities for cardinalitites
*/
//**SAX distance lookuptable
  private static final double[][] lookup_case2 = {
     { 0.000000, 0.000000 },
     { 0.000000, 0.000000 } };


 private static final double[][] lookup_case4 = {
   { 0.000000, 0.000000, 0.670000, 1.340000 }, 
   { 0.000000, 0.000000, 0.000000, 0.670000 },
      { 0.670000, 0.000000, 0.000000, 0.000000 },
       { 1.340000, 0.670000, 0.000000, 0.000000 } };
/*  private static final double[][] lookup_case4 = {
   { 0.000000, 0.000000, 256, 512 }, 
   { 0.000000, 0.000000, 0.000000, 256 },
      { 256, 0.000000, 0.000000, 0.000000 },
       { 512, 256, 0.000000, 0.000000 } };*/


  private static final double[][] lookup_case8 = {
      { 0.000000, 0.000000, 0.480000, 0.830000, 1.150000, 1.470000, 1.820000, 2.300000 },
      { 0.000000, 0.000000, 0.000000, 0.350000, 0.670000, 0.990000, 1.340000, 1.820000 },
      { 0.480000, 0.000000, 0.000000, 0.000000, 0.320000, 0.640000, 0.990000, 1.470000 },
      { 0.830000, 0.350000, 0.000000, 0.000000, 0.000000, 0.320000, 0.670000, 1.150000 },
      { 1.150000, 0.670000, 0.320000, 0.000000, 0.000000, 0.000000, 0.350000, 0.830000 },
      { 1.470000, 0.990000, 0.640000, 0.320000, 0.000000, 0.000000, 0.000000, 0.480000 },
      { 1.820000, 1.340000, 0.990000, 0.670000, 0.350000, 0.000000, 0.000000, 0.000000 },
      { 2.300000, 1.820000, 1.470000, 1.150000, 0.830000, 0.480000, 0.000000, 0.000000 } };


	  private static final double[][] lookup_case16 = {
      { 0.000000, 0.000000, 0.380000, 0.640000, 0.860000, 1.040000, 1.210000, 1.370000, 1.530000,
          1.690000, 1.850000, 2.020000, 2.200000, 2.420000, 2.680000, 3.060000 },
      { 0.000000, 0.000000, 0.000000, 0.260000, 0.480000, 0.660000, 0.830000, 0.990000, 1.150000,
          1.310000, 1.470000, 1.640000, 1.820000, 2.040000, 2.300000, 2.680000 },
      { 0.380000, 0.000000, 0.000000, 0.000000, 0.220000, 0.400000, 0.570000, 0.730000, 0.890000,
          1.050000, 1.210000, 1.380000, 1.560000, 1.780000, 2.040000, 2.420000 },
      { 0.640000, 0.260000, 0.000000, 0.000000, 0.000000, 0.180000, 0.350000, 0.510000, 0.670000,
          0.830000, 0.990000, 1.160000, 1.340000, 1.560000, 1.820000, 2.200000 },
      { 0.860000, 0.480000, 0.220000, 0.000000, 0.000000, 0.000000, 0.170000, 0.330000, 0.490000,
          0.650000, 0.810000, 0.980000, 1.160000, 1.380000, 1.640000, 2.020000 },
      { 1.040000, 0.660000, 0.400000, 0.180000, 0.000000, 0.000000, 0.000000, 0.160000, 0.320000,
          0.480000, 0.640000, 0.810000, 0.990000, 1.210000, 1.470000, 1.850000 },
      { 1.210000, 0.830000, 0.570000, 0.350000, 0.170000, 0.000000, 0.000000, 0.000000, 0.160000,
          0.320000, 0.480000, 0.650000, 0.830000, 1.050000, 1.310000, 1.690000 },
      { 1.370000, 0.990000, 0.730000, 0.510000, 0.330000, 0.160000, 0.000000, 0.000000, 0.000000,
          0.160000, 0.320000, 0.490000, 0.670000, 0.890000, 1.150000, 1.530000 },
      { 1.530000, 1.150000, 0.890000, 0.670000, 0.490000, 0.320000, 0.160000, 0.000000, 0.000000,
          0.000000, 0.160000, 0.330000, 0.510000, 0.730000, 0.990000, 1.370000 },
      { 1.690000, 1.310000, 1.050000, 0.830000, 0.650000, 0.480000, 0.320000, 0.160000, 0.000000,
          0.000000, 0.000000, 0.170000, 0.350000, 0.570000, 0.830000, 1.210000 },
      { 1.850000, 1.470000, 1.210000, 0.990000, 0.810000, 0.640000, 0.480000, 0.320000, 0.160000,
          0.000000, 0.000000, 0.000000, 0.180000, 0.400000, 0.660000, 1.040000 },
      { 2.020000, 1.640000, 1.380000, 1.160000, 0.980000, 0.810000, 0.650000, 0.490000, 0.330000,
          0.170000, 0.000000, 0.000000, 0.000000, 0.220000, 0.480000, 0.860000 },
      { 2.200000, 1.820000, 1.560000, 1.340000, 1.160000, 0.990000, 0.830000, 0.670000, 0.510000,
          0.350000, 0.180000, 0.000000, 0.000000, 0.000000, 0.260000, 0.640000 },
      { 2.420000, 2.040000, 1.780000, 1.560000, 1.380000, 1.210000, 1.050000, 0.890000, 0.730000,
          0.570000, 0.400000, 0.220000, 0.000000, 0.000000, 0.000000, 0.380000 },
      { 2.680000, 2.300000, 2.040000, 1.820000, 1.640000, 1.470000, 1.310000, 1.150000, 0.990000,
          0.830000, 0.660000, 0.480000, 0.260000, 0.000000, 0.000000, 0.000000 },
      { 3.060000, 2.680000, 2.420000, 2.200000, 2.020000, 1.850000, 1.690000, 1.530000, 1.370000,
          1.210000, 1.040000, 0.860000, 0.640000, 0.380000, 0.000000, 0.000000 } };



	public static double [][] getLookupMatrix(int cardinality){

		switch(cardinality){
			case 2: return lookup_case2.clone(); 
			case 4: return lookup_case4.clone(); 
			case 8: return lookup_case8.clone(); 
			case 16: return lookup_case16.clone();

		
		}
		System.out.println("No matrix");
		return null;
	}
	
	public static double [] getBreakpoints(int cardinality){
	
		switch(cardinality){
			case 2: return breakpoint_card_2; 
			case 4: return breakpoint_card_4; 
			case 8: return breakpoint_card_8; 						
			case 256: return breakpoint_card_256;
		}
		System.out.println("No matrix");
		return null;
	
	}
	public static int log2(int bits){

		int log = 0;
	    if( ( bits & 0xffff0000 ) != 0 ) { bits >>>= 16; log = 16; }
	    if( bits >= 256 ) { bits >>>= 8; log += 8; }
	    if( bits >= 16  ) { bits >>>= 4; log += 4; }
	    if( bits >= 4   ) { bits >>>= 2; log += 2; }

	    return log + ( bits >>> 1 );
	}
}
